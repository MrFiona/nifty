#
# Grammar for the *redex* language (REgular Document EXpressions). 
# Written in Waxeye language, see http://waxeye.org/manual.html
# 
# Compilation, in 'nifty' folder: 
#   $ ./parsing/waxeye -g python redex/ -p redex redex/redex.wx
#
# This generates a pattern_parser.py file with PatternParser class.
#
# 
# ---
# This file is part of Nifty python package. Copyright (c) 2009-2014 by Marcin Wojnarski.
# 
# Nifty is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License 
# as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
# Nifty is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
# You should have received a copy of the GNU General Public License along with Nifty. If not, see <http://www.gnu.org/licenses/>.
#


document    <=  dropspace exprA


# TOKENS

alphanum 	<=  [a-zA-Z0-9_]					# doesn't handle Unicode characters in variable names
space       <:  :+[ \t\n\r]

tilde		<-  '~'								# matches a word: sequence of 1+ alphanum characters, greedy
dot1        <-  '.'   !'.'						# 1 dot: matches any sequence of non-space characters except <>, lazy
dot2        <-  :?space '..'  !'.'	:?space		# 2 dots: any sequence of characters except <>, lazy; absorbs neighboring spaces for efficiency
dot3        <-  :?space '...' *'.'	:?space		# 3+ dots: any sequence of characters, lazy; absorbs neighboring spaces for efficiency

special     <-  '{' | '}' | '[' | ']' | '<' | '>' | '.' | '~'

# SYNTAX & SEMANTICS

# Terminals (no recursion)

escaped     <=  :'{' special :'}'			# matches the special character literally

space0      <-  space						# maybe-space, output semantics: 0+ spaces, greedy 
space1      <-  space						# must-space, output semantics: 1+ spaces, greedy
spaceX      <-  space						# around-space, output semantics: like dot2, but 1st and last char are in-tag separators ['"\s=]; or 0+ spaces
dropspace   <:  ?space						# optional leading spaces, to be omitted in AST 

word        <-  +(!special !space .)		# any word interpreted as-is, no spaces
static      <-  word *(space1 word)			# sequence of words separated by must-spaces, starts and ends with a word (not space)
wordB       <-  word						# in tags, don't parse 'static' node to allow for spaces around '=' and substitution of " with ' or the other way round 

# Non-terminals (can be recursive)

# "xA" are top-level expressions matching text outside <...> tags (but possibly containing tags inside)
# "xB" are in-tag expressions, matching text between '<' and '>' characters

exprA       <-  *(escaped | regex | atomic | varA | optionalA | static | tag | tilde | dot3 | dot2 | dot1 | space0)
exprB       <-  *(escaped | regex | atomic | varB | optionalB | wordB | tilde | dot2 | dot1 | spaceX)

tagspecial  <-  ?('/' | ':')
tagname     <-  word
noname      <-  '.'
tag         <-  :'<' tagspecial (tagname|noname) exprB ('/>' | '>')

regex       <-  :'{~' *(!'~}' .) :'~}'				# {~regex~}, a regex expression to be included directly in the output regex pattern

varname    	<-  +alphanum
repeat      <-  '*' | '+' | '*+' | '++'				# possessive quantifiers limit backtracking during regex matching, see: www.regular-expressions.info/possessive.html
vregex      <-  :'~' +(!'}' .)						# a regex inside variable: all chars allowed except '}'
vexprA		<=  !'~' :?space exprA
vexprB		<=  !'~' :?space exprB

varA		<-  :'{' ?repeat ?(varname ?vregex) ?vexprA :'}'	# ...{VAR} ...{VAR ab{CD}} ...{VAR~\w+} ...{* repeated} ...{*VAR_REPEATED xyz}
varB		<-  :'{' ?repeat ?(varname ?vregex) ?vexprB :'}'
atomic      <-  :'{>' :?space exprA :'}'						# atomic grouping, see: www.regular-expressions.info/atomic.html; 'space' is consumed only for similarity with other {...} operators
optionalA	<-  :'[' exprA :']'
optionalB	<-  :'[' exprB :']'
